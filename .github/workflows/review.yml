name: Amp Bot
on:
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  amp:
    if: contains(github.event.comment.body, '@amp')
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      COMMENT_USER: ${{ github.event.comment.user.login }}
      COMMENT_BODY: ${{ github.event.comment.body }}
      AMP_API_KEY: ${{ secrets.AMP_API_KEY }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v3
        id: cache
        with:
          path: thread_cache.json
          key: thread-${{ env.PR_NUMBER }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install Sourcegraph Amp
        run: npm install -g @sourcegraph/amp

      - uses: astral-sh/setup-uv@v5
      - run: uv sync --all-extras --dev

      - name: Extract user command
        run: |
          # Extract the command after @amp
          USER_COMMAND=$(echo "$COMMENT_BODY" | sed 's/^@amp\s*//')
          echo "USER_COMMAND=$USER_COMMAND" >> $GITHUB_ENV

      - name: Check for cached thread ID
        id: thread-check
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          if [ -f thread_cache.json ]; then
            THREAD_ID=$(cat thread_cache.json | jq -r '.thread_id')
            echo "THREAD_ID=$THREAD_ID" >> $GITHUB_ENV
            echo "CACHED=true" >> $GITHUB_ENV
          else
            echo "CACHED=false" >> $GITHUB_ENV
          fi

      - name: Get or create thread ID
        run: |
          if [ "$CACHED" = "true" ] && [ -n "$THREAD_ID" ]; then
            echo "Using cached thread ID: $THREAD_ID"
          else
            echo "Creating new thread"
            # Run the fetch script to get the latest threads
            python fetch.py
            cat output.json
            
            # Get the first thread ID from the output
            FIRST_THREAD_ID=$(cat output.json | jq -r '.[0].id')
            echo "THREAD_ID=$FIRST_THREAD_ID" >> $GITHUB_ENV
            
            # Save to cache file
            echo "{\"thread_id\": \"$FIRST_THREAD_ID\"}" > thread_cache.json
          fi

      - name: Run Amp with user command
        run: |
          # Run amp with the user command and thread ID
          if [ -n "$THREAD_ID" ]; then
            echo "$USER_COMMAND" | amp --thread-id "$THREAD_ID"
          else
            echo "$USER_COMMAND" | amp
          fi

      - name: Commit and push changes
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            # Add all changes
            git add -A
            
            # Commit changes
            git commit -m "Changes made by @amp: $USER_COMMAND"
            
            # Push changes back to the PR branch
            git push origin HEAD:${{ github.event.pull_request.head.ref }}
            
            echo "CHANGES_MADE=true" >> $GITHUB_ENV
          else
            echo "CHANGES_MADE=false" >> $GITHUB_ENV
          fi

      - name: Respond to comment
        run: |
          CACHE_STATUS="Using new thread"
          if [ "$CACHED" = "true" ]; then
            CACHE_STATUS="Using cached thread"
          fi
          
          RUN_LINK="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          THREAD_LINK="https://ampcode.com/threads/$THREAD_ID"

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
            -d "{\"body\": \"@$COMMENT_USER $CACHE_STATUS\n\n[Thread-ID: $THREAD_ID]($THREAD_LINK)\nRun Link: $RUN_LINK\n\n> $COMMENT_BODY\"}"

      - uses: actions/cache/save@v3
        with:
          path: thread_cache.json
          key: thread-${{ env.PR_NUMBER }}
